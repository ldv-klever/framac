# frama-c -wp -wp-model 'Typed (Ref)' [...]
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/wp_acsl/funvar_inv.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] warning: Missing RTE guards
------------------------------------------------------------
  Function f
------------------------------------------------------------

Goal Post-condition 'P_startof' in 'f':
Let a = shift_A4_sint32(global(G_G_67), 0).
Assume {
  Type: is_sint32(v) /\ is_sint32(Mint_0[shift_sint32(a, 1)]).
  (* Goal *)
  When: Mint_0[shift_sint32(a, 0)] = 0.
  (* Heap *)
  Have: linked(Malloc_0).
  (* Initializer *)
  Init: Mint_0[global(L_i_72)] = 0.
  If v <= 3
  Then {
    Let a_1 = shift_sint32(a, v).
    (* Else *)
    Have: Mint_0[a_1] = 0.
    Have: a_1 = f.
  }
  Else { Have: global(L_i_72) = f. }
}
Prove: a = f.

------------------------------------------------------------

Goal Post-condition 'P_addr' in 'f':
Let a = shift_A4_sint32(global(G_G_67), 0).
Let x = Mint_0[shift_sint32(a, 0)].
Let a_1 = shift_sint32(a, 1).
Assume {
  Type: is_sint32(v) /\ is_sint32(x).
  (* Goal *)
  When: (x != 0) /\ (Mint_0[a_1] = 0).
  (* Heap *)
  Have: linked(Malloc_0).
  (* Initializer *)
  Init: Mint_0[global(L_i_72)] = 0.
  If v <= 3
  Then {
    Let a_2 = shift_sint32(a, v).
    (* Else *)
    Have: Mint_0[a_2] = 0.
    Have: a_2 = f.
  }
  Else { Have: global(L_i_72) = f. }
}
Prove: a_1 = f.

------------------------------------------------------------

Goal Loop assigns 'qed_ok,index':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function f2
------------------------------------------------------------

Goal Post-condition 'P_startof_shift' in 'f2':
Let a = shift_A4_sint32(global(G_G_67), 0).
Assume {
  Type: is_sint32(v) /\ is_sint32(Mint_0[shift_sint32(a, 1)]).
  (* Goal *)
  When: Mint_0[shift_sint32(a, 0)] = 0.
  (* Heap *)
  Have: linked(Malloc_0).
  (* Initializer *)
  Init: Mint_0[global(L_i_77)] = 0.
  If (4 * v) <= 15
  Then {
    (* Else *)
    Have: Mint_0[shift_sint32(a, v)] = 0.
    If 4 <= v
    Then { Have: global(L_i_77) = f2_0. }
    Else { Have: shift_sint32(a, v) = f2_0. }
  }
  Else {
    If 4 <= v
    Then { Have: global(L_i_77) = f2_0. }
    Else { Have: shift_sint32(a, v) = f2_0. }
  }
}
Prove: a = f2_0.

------------------------------------------------------------

Goal Post-condition 'P_addr_shift' in 'f2':
Let a = shift_A4_sint32(global(G_G_67), 0).
Let x = Mint_0[shift_sint32(a, 0)].
Let a_1 = shift_sint32(a, 1).
Assume {
  Type: is_sint32(v) /\ is_sint32(x).
  (* Goal *)
  When: (x != 0) /\ (Mint_0[a_1] = 0).
  (* Heap *)
  Have: linked(Malloc_0).
  (* Initializer *)
  Init: Mint_0[global(L_i_77)] = 0.
  If (4 * v) <= 15
  Then {
    (* Else *)
    Have: Mint_0[shift_sint32(a, v)] = 0.
    If 4 <= v
    Then { Have: global(L_i_77) = f2_0. }
    Else { Have: shift_sint32(a, v) = f2_0. }
  }
  Else {
    If 4 <= v
    Then { Have: global(L_i_77) = f2_0. }
    Else { Have: shift_sint32(a, v) = f2_0. }
  }
}
Prove: a_1 = f2_0.

------------------------------------------------------------

Goal Loop assigns 'qed_ok,index':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function g
------------------------------------------------------------

Goal Post-condition 'P_addr_startof_shift' in 'g':
Let a = shift_A4_sint32(global(G_G_67), 0).
Assume {
  Type: is_sint32(v) /\ is_sint32(Mint_0[shift_sint32(a, 1)]).
  (* Goal *)
  When: Mint_0[shift_sint32(a, 0)] = 0.
  (* Heap *)
  Have: linked(Malloc_0).
  (* Initializer *)
  Init: Mint_0[global(L_i_82)] = 0.
  If (16 * v) <= 63
  Then {
    (* Else *)
    Have: Mint_0[shift_sint32(a, v)] = 0.
    If 4 <= v
    Then { Have: global(L_i_82) = g. }
    Else { Have: shift_sint32(a, v) = g. }
  }
  Else {
    If 4 <= v
    Then { Have: global(L_i_82) = g. }
    Else { Have: shift_sint32(a, v) = g. }
  }
}
Prove: a = g.

------------------------------------------------------------

Goal Post-condition 'P_addr_addr_shift' in 'g':
Let a = shift_A4_sint32(global(G_G_67), 0).
Let x = Mint_0[shift_sint32(a, 0)].
Let a_1 = shift_sint32(a, 1).
Assume {
  Type: is_sint32(v) /\ is_sint32(x).
  (* Goal *)
  When: (x != 0) /\ (Mint_0[a_1] = 0).
  (* Heap *)
  Have: linked(Malloc_0).
  (* Initializer *)
  Init: Mint_0[global(L_i_82)] = 0.
  If (16 * v) <= 63
  Then {
    (* Else *)
    Have: Mint_0[shift_sint32(a, v)] = 0.
    If 4 <= v
    Then { Have: global(L_i_82) = g. }
    Else { Have: shift_sint32(a, v) = g. }
  }
  Else {
    If 4 <= v
    Then { Have: global(L_i_82) = g. }
    Else { Have: shift_sint32(a, v) = g. }
  }
}
Prove: a_1 = g.

------------------------------------------------------------

Goal Loop assigns 'qed_ok':
Prove: true.

------------------------------------------------------------
