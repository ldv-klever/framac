# frama-c -wp -wp-no-let [...]
[kernel] Parsing tests/wp_plugin/bool.i (no preprocessing)
[wp] Running WP plugin...
[wp] Loading driver 'share/wp.driver'
[wp] Warning: Missing RTE guards
------------------------------------------------------------
  Function band_bool with behavior false
------------------------------------------------------------

Goal Post-condition for 'false' (file tests/wp_plugin/bool.i, line 30) in 'band_bool':
Assume {
  Type: is_uint8(a) /\ is_uint8(a_1) /\ is_uint8(b) /\ is_uint8(b_1) /\
      is_uint8(band_bool_0) /\ is_uint8(retres_0).
  Have: (a_1 = a) /\ (b_1 = b).
  (* Pre-condition for 'false' *)
  Have: (a_1 != 1) \/ (b_1 != 1).
  Have: (if (land(a, b) = 0) then 0 else 1) = retres_0.
  (* Return *)
  Have: retres_0 = band_bool_0.
}
Prove: band_bool_0 = 0.

------------------------------------------------------------
------------------------------------------------------------
  Function band_bool with behavior true
------------------------------------------------------------

Goal Post-condition for 'true' (file tests/wp_plugin/bool.i, line 27) in 'band_bool':
Assume {
  Type: is_uint8(a) /\ is_uint8(a_1) /\ is_uint8(b) /\ is_uint8(b_1) /\
      is_uint8(band_bool_0) /\ is_uint8(retres_0).
  Have: (a_1 = a) /\ (b_1 = b).
  (* Pre-condition for 'true' *)
  Have: (a_1 = 1) /\ (b_1 = 1).
  Have: (if (land(a, b) = 0) then 0 else 1) = retres_0.
  (* Return *)
  Have: retres_0 = band_bool_0.
}
Prove: band_bool_0 = 1.

------------------------------------------------------------
------------------------------------------------------------
  Function bor_bool with behavior false
------------------------------------------------------------

Goal Post-condition for 'false' (file tests/wp_plugin/bool.i, line 20) in 'bor_bool':
Assume {
  Type: is_uint8(a) /\ is_uint8(a_1) /\ is_uint8(b) /\ is_uint8(b_1) /\
      is_uint8(bor_bool_0) /\ is_uint8(retres_0).
  Have: (a_1 = a) /\ (b_1 = b).
  (* Pre-condition for 'false' *)
  Have: (a_1 != 1) /\ (b_1 != 1).
  Have: (if ((a = 0) & (b = 0)) then 0 else 1) = retres_0.
  (* Return *)
  Have: retres_0 = bor_bool_0.
}
Prove: bor_bool_0 = 0.

------------------------------------------------------------
------------------------------------------------------------
  Function bor_bool with behavior true
------------------------------------------------------------

Goal Post-condition for 'true' (file tests/wp_plugin/bool.i, line 17) in 'bor_bool':
Assume {
  Type: is_uint8(a) /\ is_uint8(a_1) /\ is_uint8(b) /\ is_uint8(b_1) /\
      is_uint8(bor_bool_0) /\ is_uint8(retres_0).
  Have: (a_1 = a) /\ (b_1 = b).
  (* Pre-condition for 'true' *)
  Have: (a_1 = 1) \/ (b_1 = 1).
  Have: (if ((a = 0) & (b = 0)) then 0 else 1) = retres_0.
  (* Return *)
  Have: retres_0 = bor_bool_0.
}
Prove: bor_bool_0 = 1.

------------------------------------------------------------
------------------------------------------------------------
  Function bxor_bool with behavior false
------------------------------------------------------------

Goal Post-condition for 'false' (file tests/wp_plugin/bool.i, line 39) in 'bxor_bool':
Assume {
  Type: is_uint8(a) /\ is_uint8(a_1) /\ is_uint8(b) /\ is_uint8(b_1) /\
      is_uint8(bxor_bool_0) /\ is_uint8(retres_0).
  Have: (a_1 = a) /\ (b_1 = b).
  (* Pre-condition for 'false' *)
  Have: ((a_1 != 0) \/ (b_1 != 1)) /\ ((a_1 != 1) \/ (b_1 != 0)).
  Have: (if (b = a) then 0 else 1) = retres_0.
  (* Return *)
  Have: retres_0 = bxor_bool_0.
}
Prove: bxor_bool_0 = 0.

------------------------------------------------------------
------------------------------------------------------------
  Function bxor_bool with behavior true
------------------------------------------------------------

Goal Post-condition for 'true' (file tests/wp_plugin/bool.i, line 36) in 'bxor_bool':
Assume {
  Type: is_uint8(a) /\ is_uint8(a_1) /\ is_uint8(b) /\ is_uint8(b_1) /\
      is_uint8(bxor_bool_0) /\ is_uint8(retres_0).
  Have: (a_1 = a) /\ (b_1 = b).
  (* Pre-condition for 'true' *)
  Have: ((a_1 = 0) /\ (b_1 = 1)) \/ ((a_1 = 1) /\ (b_1 = 0)).
  Have: (if (b = a) then 0 else 1) = retres_0.
  (* Return *)
  Have: retres_0 = bxor_bool_0.
}
Prove: bxor_bool_0 = 1.

------------------------------------------------------------
------------------------------------------------------------
  Function job
------------------------------------------------------------

Goal Post-condition (file tests/wp_plugin/bool.i, line 12) in 'job':
Assume {
  Type: is_uint8(a) /\ is_uint8(b) /\ is_sint32(job_0) /\
      is_sint32(retres_0).
  Have: (a + b) = retres_0.
  (* Return *)
  Have: retres_0 = job_0.
}
Prove: (0 <= job_0) /\ (job_0 <= 2).

------------------------------------------------------------
