(**************************************************************************)
(*                                                                        *)
(*  This file is part of WP plug-in of Frama-C.                           *)
(*                                                                        *)
(*  Copyright (C) 2007-2013                                               *)
(*    CEA (Commissariat a l'energie atomique et aux energies              *)
(*         alternatives)                                                  *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

(* -------------------------------------------------------------------------- *)
(* --- C-Integer Arithmetics for Alt-Ergo                                 --- *)
(* -------------------------------------------------------------------------- *)

theory Cfloat

  use import real.Real
  use import real.RealInfix
  use import real.Abs

  (* C-Float IEEE-754 *)

  use export floating_point.Rounding
  use import floating_point.Single
  use import floating_point.Double

  type rounding_mode = Rounding.mode

  function round_float  (m:rounding_mode) (x:real) : real = Single.round m x
  function round_double (m:rounding_mode) (x:real) : real = Double.round m x

  (* C-Float Conversion *)

  function to_float32 (x:real) : real = Single.round NearestTiesToEven x
  function to_float64 (x:real) : real = Double.round NearestTiesToEven x

  predicate is_float32 real
  predicate is_float64 real

  axiom def_float32: forall x:real [ is_float32(x) ]. is_float32 x -> to_float32 x = x
  axiom def_float64: forall x:real [ is_float64(x) ]. is_float64 x -> to_float64 x = x

  predicate is_finite32 (x:real) = abs(x) <= Single.max_single
  predicate is_finite64 (x:real) = abs(x) <= Double.max_double
  
  axiom is_finite_to_float_32 : 
    forall x:real [is_finite32(to_float32 x)]. is_finite32(to_float32 x)

  axiom is_finite_to_float_64 :
    forall x:real [is_finite64(to_float64 x)]. is_finite64(to_float64 x)

  (* C-Float Conversions are projections *)

  axiom proj_float32 : forall x:real [ to_float32(to_float32 x) ]. to_float32(to_float32 x)=to_float32 x 
  axiom proj_float64 : forall x:real [ to_float64(to_float64 x) ]. to_float64(to_float64 x)=to_float64 x 

  (* C-Float Arithemtics *)

  function add_float32(x:real)(y:real):real = to_float32(x+y)
  function add_float64(x:real)(y:real):real = to_float64(x+y)

  function sub_float32(x:real)(y:real):real = to_float32(x-y)
  function sub_float64(x:real)(y:real):real = to_float64(x-y)

  function mul_float32(x:real)(y:real):real = to_float32(x*y)
  function mul_float64(x:real)(y:real):real = to_float64(x*y)

  function div_float32(x:real)(y:real):real = to_float32(x/y)
  function div_float64(x:real)(y:real):real = to_float64(x/y)

  (* Real Arithemtics *)

  function ropp (x:real):real = -. x
  function radd (x:real)(y:real):real = x +. y
  function rsub (x:real)(y:real):real = x -. y
  function rmul (x:real)(y:real):real = x *. y
  function rdiv (x:real)(y:real):real = x /. y

end

