(**************************************************************************)
(*                                                                        *)
(*  This file is part of WP plug-in of Frama-C.                           *)
(*                                                                        *)
(*  Copyright (C) 2007-2013                                               *)
(*    CEA (Commissariat a l'energie atomique et aux energies              *)
(*         alternatives)                                                  *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

(* -------------------------------------------------------------------------- *)
(* --- C-Integer Arithmetics for Alt-Ergo                                 --- *)
(* -------------------------------------------------------------------------- *)

(* C-Float Conversion *)

logic to_float32 : real -> real
logic to_float64 : real -> real
predicate is_float32(x : real) = to_float32(x)=x
predicate is_float64(x : real) = to_float64(x)=x

(* C-Float Rounding Modes *)

type rounding_mode = Up | Down | ToZero | NearestTiesToAway | NearestTiesToEven
logic round_double : rounding_mode,real -> real
logic round_float : rounding_mode,real -> real
logic is_finite32 : real -> prop
logic is_finite64 : real -> prop

axiom float_32:
  forall x:real [ round_float( NearestTiesToEven , x ) ].
  to_float32(x) = round_float( NearestTiesToEven , x )

axiom float_64:
  forall x:real [ round_double( NearestTiesToEven , x ) ].
  to_float64(x) = round_double( NearestTiesToEven , x )

axiom is_finite_to_float_32 : 
  forall x:real [is_finite32(to_float32(x))]. is_finite32(to_float32(x))

axiom is_finite_to_float_64 :
  forall x:real [is_finite64(to_float64(x))]. is_finite64(to_float64(x))

(* C-Float Rounded Arithmetics *)

function add_float32(x:real,y:real):real = to_float32(x+y)
function add_float64(x:real,y:real):real = to_float64(x+y)

function sub_float32(x:real,y:real):real = to_float32(x-y)
function sub_float64(x:real,y:real):real = to_float64(x-y)

function mul_float32(x:real,y:real):real = to_float32(x*y)
function mul_float64(x:real,y:real):real = to_float64(x*y)

function div_float32(x:real,y:real):real = to_float32(x/y)
function div_float64(x:real,y:real):real = to_float64(x/y)

(* Real Arithmetics *)

function ropp(x:real):real = -x
function radd(x:real,y:real):real = x+y
function rsub(x:real,y:real):real = x-y
function rmul(x:real,y:real):real = x*y
function rdiv(x:real,y:real):real = x/y
