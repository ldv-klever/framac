(**************************************************************************)
(*                                                                        *)
(*  This file is part of WP plug-in of Frama-C.                           *)
(*                                                                        *)
(*  Copyright (C) 2007-2013                                               *)
(*    CEA (Commissariat a l'energie atomique et aux energies              *)
(*         alternatives)                                                  *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

(* Additional Libraries for Why-3 *)

theory Arith

  use import bool.Bool
  use import int.Int
  use import real.RealInfix
  use import real.FromInt

  function eqb 'a 'a : bool
  axiom eqb : forall x:'a, y:'a. eqb x y = True <-> x = y

  function neqb 'a 'a : bool
  axiom neqb : forall x:'a, y:'a. neqb x y = True <-> x <> y

  function zlt  int int : bool
  function zleq int int : bool

  axiom zlt  : forall x:int, y:int. zlt  x y = True <-> x < y
  axiom zleq : forall x:int, y:int. zleq x y = True <-> x <= y

  function rlt  real real : bool
  function rleq real real : bool

  axiom rlt  : forall x:real, y:real. rlt  x y = True <-> x <. y
  axiom rleq : forall x:real, y:real. rleq x y = True <-> x <=. y

  function real_of_int (x:int) : real = FromInt.from_int x

end
