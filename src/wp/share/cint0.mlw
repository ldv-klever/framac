(**************************************************************************)
(*                                                                        *)
(*  This file is part of WP plug-in of Frama-C.                           *)
(*                                                                        *)
(*  Copyright (C) 2007-2013                                               *)
(*    CEA (Commissariat a l'energie atomique et aux energies              *)
(*         alternatives)                                                  *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

(* ---------------------------------------------------------------------- *)
(* --- cint library: C-Integer Arithmetics for Alt-Ergo               --- *)
(* ---------------------------------------------------------------------- *)

(* C-Integer Ranges *)

logic is_uint8 : int -> prop
logic is_sint8 : int -> prop
logic is_uint16 : int -> prop
logic is_sint16 : int -> prop
logic is_uint32 : int -> prop
logic is_sint32 : int -> prop
logic is_uint64 : int -> prop
logic is_sint64 : int -> prop

(* C-Integer Conversion *)

logic to_uint8  : int -> int 
logic to_sint8  : int -> int 
logic to_uint16 : int -> int 
logic to_sint16 : int -> int 
logic to_uint32 : int -> int 
logic to_sint32 : int -> int 
logic to_uint64 : int -> int 
logic to_sint64 : int -> int 

(* Unsigned C-Integer are positive *)

axiom positive_uint8 : forall x:int [ is_uint8(x) ]. is_uint8(x) -> x>=0
axiom positive_uint16 : forall x:int [ is_uint16(x) ]. is_uint16(x) -> x>=0
axiom positive_uint32 : forall x:int [ is_uint32(x) ]. is_uint32(x) -> x>=0
axiom positive_uint64 : forall x:int [ is_uint64(x) ]. is_uint64(x) -> x>=0

(* C-Integer Conversions are in-range *)

axiom is_to_uint8 : forall x:int 
[ is_uint8(to_uint8(x)) ].
  is_uint8(to_uint8(x)) 
axiom is_to_sint8 : forall x:int 
[ is_sint8(to_sint8(x)) ].
  is_sint8(to_sint8(x)) 
axiom is_to_uint16 : forall x:int 
[ is_uint16(to_uint16(x)) ].
  is_uint16(to_uint16(x)) 
axiom is_to_sint16 : forall x:int 
[ is_sint16(to_sint16(x)) ].
  is_sint16(to_sint16(x)) 
axiom is_to_uint32 : forall x:int 
[ is_uint32(to_uint32(x)) ].
  is_uint32(to_uint32(x)) 
axiom is_to_sint32 : forall x:int 
[ is_sint32(to_sint32(x)) ].
  is_sint32(to_sint32(x)) 
axiom is_to_uint64 : forall x:int 
[ is_uint64(to_uint64(x)) ].
  is_uint64(to_uint64(x)) 
axiom is_to_sint64 : forall x:int 
[ is_sint64(to_sint64(x)) ].
  is_sint64(to_sint64(x)) 

(* C-Integer Conversions are identity when in-range *)

axiom id_uint8 : forall x:int [ to_uint8(x) ].
                0 <= x < 256 -> to_uint8(x) = x 
axiom id_sint8 : forall x:int [ to_sint8(x) ].
             -128 <= x < 128 -> to_sint8(x) = x 
axiom id_uint16 : forall x:int [ to_uint16(x) ].
               0 <= x < 65536 -> to_uint16(x) = x 
axiom id_sint16 : forall x:int [ to_sint16(x) ].
          -32768 <= x < 32768 -> to_sint16(x) = x 
axiom id_uint32 : forall x:int [ to_uint32(x) ].
          0 <= x < 4294967296 -> to_uint32(x) = x 
axiom id_sint32 : forall x:int   [ to_sint32(x) ].
  -2147483648 <= x < 2147483648 -> to_sint32(x) = x 
axiom id_uint64 : forall x:int   [ to_uint64(x) ].
  0 <= x < 18446744073709551616 -> to_uint64(x) = x 
axiom id_sint64 : forall x:int                     [ to_sint64(x) ].
  -9223372036854775808 <= x < 9223372036854775808 -> to_sint64(x) = x 
 
(* C-Integer Bits Signature *)

logic    lnot : int -> int
logic ac land : int,int -> int
logic ac lxor : int,int -> int
logic ac lor  : int,int -> int

logic lsl  : int,int -> int
logic lsr  : int,int -> int

logic bit_test : int,int -> bool

(* End of cint library *)
