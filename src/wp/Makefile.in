##########################################################################
#                                                                        #
#  This file is part of WP plug-in of Frama-C.                           #
#                                                                        #
#  Copyright (C) 2007-2013                                               #
#    CEA (Commissariat a l'energie atomique et aux energies              #
#         alternatives)                                                  #
#                                                                        #
#  you can redistribute it and/or modify it under the terms of the GNU   #
#  Lesser General Public License as published by the Free Software       #
#  Foundation, version 2.1.                                              #
#                                                                        #
#  It is distributed in the hope that it will be useful,                 #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#  GNU Lesser General Public License for more details.                   #
#                                                                        #
#  See the GNU Lesser General Public License version 2.1                 #
#  for more details (enclosed in the file licenses/LGPLv2.1).            #
#                                                                        #
##########################################################################

# Do not use ?= to initialize both below variables
# (fixed efficiency issue, see GNU Make manual, Section 8.11)
ifndef FRAMAC_SHARE
FRAMAC_SHARE  :=$(shell frama-c -journal-disable -print-path)
endif
ifndef FRAMAC_LIBDIR
FRAMAC_LIBDIR :=$(shell frama-c -journal-disable -print-libpath)
endif
PLUGIN_DIR ?=.

include $(FRAMAC_SHARE)/Makefile.config

COQLIBS:= \
	share/Qedlib.v \
	share/Bits.v \
	share/Cbits.v \
	share/Cint.v \
	share/Cfloat.v \
	share/Cmath.v \
	share/Vset.v \
	share/Memory.v

ERGOLIBS:= \
        share/qed.mlw \
	share/cbits.mlw \
	share/cint0.mlw \
	share/cint.mlw \
	share/cfloat.mlw \
	share/cmath.mlw \
	share/vset.mlw \
	share/memory.mlw

WHY3LIBS:= \
	share/qed.why \
	share/cint.why \
	share/cfloat.why \
	share/cmath.why \
	share/memory.why \
	share/vset.why

MODELS:= $(WHY3LIBS) $(COQLIBS) $(ERGOLIBS)

ifeq (@COQC@,yes)
RESOURCES:= $(MODELS) $(addsuffix o,$(COQLIBS))
else
RESOURCES:= $(MODELS)
endif


# Extension of the GUI for wp is compilable
# only if gnomecanvas is available
ifeq ($(HAS_GNOMECANVAS),yes)
PLUGIN_GUI_CMO:= \
	GuiConfig \
	GuiList \
	GuiGoal \
	GuiSource \
	GuiPanel \
	GuiNavigator
endif

PLUGIN_ENABLE:=@ENABLE_WP@
PLUGIN_DYNAMIC:=@DYNAMIC_WP@
PLUGIN_NAME:=Wp
PLUGIN_CMO:= \
	rformat wprop \
	wp_parameters wp_error \
	ctypes clabels \
	LogicUsage VarUsage RefUsage variables_analysis \
	cil2cfg normAtLabels \
	wpPropId wpStrategy wpFroms wpAnnot \
	Context Warning Model Lang Matrix Passive Splitter \
	Letify Cleaning Partitioning Conditions \
	LogicBuiltins Definitions \
	Cint Cfloat Vset Region Cstring Cvalues \
	CodeSemantics \
	LogicCompiler \
	LogicSemantics LogicAssigns  \
	Sigma MemEmpty MemVar MemTyped \
	VCS script proof wpo wpReport \
	ProverTask ProverErgo ProverCoq ProverWhy3 \
	why3_xml why3_session \
	driver prover \
	calculus \
	cfgDump cfgWP \
	Generator Factory \
	register

PLUGIN_CMI:= mcfg Memory \

PLUGIN_GENERATED:= \
   $(PLUGIN_DIR)/script.ml \
   $(PLUGIN_DIR)/rformat.ml \
   $(PLUGIN_DIR)/driver.ml \
   $(PLUGIN_DIR)/why3_xml.ml

PLUGIN_UNDOC+=
PLUGIN_DOCFLAGS+= -I $(PLUGIN_DIR)/qed/bin
PLUGIN_INTRO:=$(FRAMAC_SRC)/doc/code/intro_wp.txt
PLUGIN_HAS_MLI:=yes
PLUGIN_DISTRIBUTED:=$(PLUGIN_ENABLE)
PLUGIN_DISTRIB_EXTERNAL:= \
	Makefile.in \
	configure.ac \
	configure \
	share/Makefile \
	$(MODELS)

CEA_WP+= $(addprefix $(PLUGIN_DIR)/, Makefile.in configure.ac) \
	 $(addprefix $(PLUGIN_DIR)/, share/Makefile) \
	 $(addprefix $(PLUGIN_DIR)/, $(MODELS)) \
	 $(addprefix $(PLUGIN_DIR)/, script.mll rformat.mll driver.mll) \
         $(addprefix $(PLUGIN_DIR)/, *.ml) \
	 $(addprefix $(PLUGIN_DIR)/, *.mli) \
	 $(PLUGIN_DIR)/why3_xml.mll \

ifeq ("$(OCAMLGRAPH_LOCAL)","")
OFLAGS+=-I +ocamlgraph
BFLAGS+=-I +ocamlgraph
endif

# --------------------------------------------------------------------------
# --- Qed Dependencies                                                   ---
# --------------------------------------------------------------------------

QED_LIB := $(PLUGIN_DIR)/qed/bin
QED_CMO = $(QED_LIB)/Qed.cmo
QED_CMX = $(QED_LIB)/Qed.cmx

QED_SRC = $(PLUGIN_DIR)/qed/src

include $(QED_SRC)/Makefile.src

QED_FILES = Makefile.src Makefile MakeOcaml ocamldoc.css lexer.mll numbers.mll \
  $(addsuffix .mli,$(QED_LIB_ML) $(QED_SRC_ML) $(QED_SRC_MLI)) \
  $(addsuffix .ml, \
	$(filter-out $(QED_GENERATED), \
		$(QED_LIB_ML) $(QED_SRC_ML)))
QED_SOURCES:= $(addprefix $(QED_SRC)/,$(QED_FILES))

PLUGIN_BFLAGS:= -I $(QED_LIB)
PLUGIN_OFLAGS:= -I $(QED_LIB)

PLUGIN_EXTRA_BYTE:=$(QED_CMO)
PLUGIN_EXTRA_OPT:=$(QED_CMX)

QED_DISTRIB_SRC:=$(addprefix qed/src/,$(QED_FILES))

CEA_WP+=$(QED_SOURCES)
PLUGIN_DISTRIB_EXTERNAL+= $(QED_DISTRIB_SRC)

# --------------------------------------------------------------------------
# --- Tests                                                              ---
# --------------------------------------------------------------------------

PLUGIN_TESTS_DIRS:= \
  wp wp_plugin wp_acsl wp_bts \
  wp_store wp_hoare wp_typed

# --------------------------------------------------------------------------
# --- Dynamic Plugin                                                     ---
# --------------------------------------------------------------------------

# Hide warnings that are bothersome during development
PLUGIN_BFLAGS+=-w -32..39
PLUGIN_OFLAGS+=-w -32..39

include $(FRAMAC_SHARE)/Makefile.dynamic

# Regenerating the Makefile on need

ifeq ("$(FRAMAC_INTERNAL)","yes")
CONFIG_STATUS_DIR=$(FRAMAC_SRC)
else
CONFIG_STATUS_DIR=.
endif

$(Wp_DIR)/Makefile: $(Wp_DIR)/Makefile.in $(QED_SRC)/Makefile.src $(CONFIG_STATUS_DIR)/config.status
	@cd $(CONFIG_STATUS_DIR) && ./config.status
	$(QUIET_MAKE) depend

# --------------------------------------------------------------------------
# --- Qed Dependencies                                                   ---
# --------------------------------------------------------------------------

.PHONY: qed

qed: 
	@echo "Cleaning     Qed"
	@rm -f $(QED_LIB)/*
	@rm -f $(Wp_DIR)/qed/src/*.cm?
	$(MAKE) $(QED_CMO) $(QED_CMX)

clean::
	@echo "Cleaning     Qed"
	@rm -f $(QED_LIB)/*
	$(QUIET_MAKE) -C $(Wp_DIR)/qed/src clean

$(Wp_DIR)/Memory.cmi: $(QED_CMO)
$(Wp_DIR)/ctypes.cmi: $(QED_CMO)
$(Wp_DIR)/ctypes.cmo: $(QED_CMO)
$(Wp_DIR)/ctypes.cmx: $(QED_CMX)
$(Wp_DIR)/RefUsage.cmi: $(QED_CMO)
$(Wp_DIR)/RefUsage.cmo: $(QED_CMO)
$(Wp_DIR)/RefUsage.cmx: $(QED_CMX)
$(Wp_DIR)/Splitter.cmi: $(QED_CMO)
$(Wp_DIR)/Splitter.cmo: $(QED_CMO)
$(Wp_DIR)/Splitter.cmx: $(QED_CMX)
$(Wp_DIR)/Lang.cmi:   $(QED_CMO)
$(Wp_DIR)/Lang.cmo:   $(QED_CMO)
$(Wp_DIR)/Lang.cmx:   $(QED_CMX)
$(Wp_DIR)/Vset.cmo:   $(QED_CMO)
$(Wp_DIR)/Vset.cmx:   $(QED_CMX)

ifeq (@COQC@,yes)
byte:: .make-wpcoqc
opt:: .make-wpcoqc
endif

ifeq ($(OCAMLOPT),ocamlopt.opt)
QEDOPT=.opt
else
QEDOPT=
endif

$(QED_CMO): $(QED_SOURCES)
	@echo "Compiling    Qed (byte$(QEDOPT))"
	$(QUIET_MAKE) -C $(Wp_DIR)/qed/src depend OCAMLDEP=$(OCAMLDEP)
	$(QUIET_MAKE) OPT=$(QEDOPT) -C $(Wp_DIR)/qed/src byte \
		OCAMLC=$(OCAMLC) \
		OCAMLLEX=$(OCAMLLEX)

$(QED_CMX): $(QED_CMO) #- To avoid parallel invocation of Qed makefile
	@echo "Compiling    Qed (opt$(QEDOPT))"
	$(QUIET_MAKE) OPT=$(QEDOPT) -C $(Wp_DIR)/qed/src opt \
		OCAMLOPT=$(OCAMLOPT) \
		OCAMLLEX=$(OCAMLLEX)

# --------------------------------------------------------------------------
# --- Pre-Compiled Coq Libraries                                         ---
# --------------------------------------------------------------------------

.PHONY: wpcoqc

wpcoq: .make-wpcoqc
	@echo "Run 'make install-wpcoq' to install the precompiled libraries"

install-wpcoq:
	$(PRINT_CP) Precompiled Coq Libraries
	$(CP) $(addprefix $(Wp_DIR)/,$(addsuffix o,$(COQLIBS))) $(FRAMAC_DATADIR)/wp
	@echo "Run 'make uninstall-wpcoq' to uninstall the precompiled libraries"

uninstall-wpcoq:
	$(PRINT_RM) Precompiled Coq Libraries
	$(RM) -f $(FRAMAC_DATADIR)/wp/*.vo

.make-wpcoqc: .make-wpcoqs
	@echo "Compiling    Wp-Coq Library"
	$(MAKE) -C $(Wp_DIR)/share coq #Don't use QUIET_MAKE because too long!
	@touch .make-wpcoqc

.make-wpcoqs: $(addprefix $(Wp_DIR)/,$(COQLIBS))
	@echo "Preparing    Wp-Coq Sources"
	$(QUIET_MAKE) -C $(Wp_DIR)/share depend
	@touch .make-wpcoqs

clean::
	@echo "Cleaning     Wp-Coq Libraries"
	@rm -f .make-wpcoqs .make-wpcoqc
	$(QUIET_MAKE) -C $(Wp_DIR)/share clean

# --------------------------------------------------------------------------
# --- Installation                                                       ---
# --------------------------------------------------------------------------

# note: installation and uninstallation do not use environment variable FRAMA_SHARE!
install::
	$(PRINT_CP) WP shared files
	$(MKDIR) $(FRAMAC_DATADIR)/wp
	$(CP) $(addprefix $(Wp_DIR)/,$(RESOURCES)) $(FRAMAC_DATADIR)/wp

uninstall::
	$(PRINT_RM) WP shared files
	$(RM) -r $(FRAMAC_DATADIR)/wp

# --------------------------------------------------------------------------
# --- WP Release Stuff (CEA-LIST Only)
# --------------------------------------------------------------------------
sinclude MakeDistrib
# --------------------------------------------------------------------------

$(Wp_DIR)/.depend: $(Wp_DIR)/driver.mll
$(Wp_DIR)/driver.mll: $(Wp_DIR)/Makefile.in $(Wp_DIR)/Makefile
