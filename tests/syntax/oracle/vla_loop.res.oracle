[kernel] Parsing share/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/syntax/vla_loop.i (no preprocessing)
tests/syntax/vla_loop.i:4:[kernel] warning: Variable-sized local variable a1
tests/syntax/vla_loop.i:16:[kernel] warning: Variable-sized local variable a
tests/syntax/vla_loop.i:26:[kernel] warning: Variable-sized local variable b
tests/syntax/vla_loop.i:32:[kernel] warning: Variable-sized local variable c
tests/syntax/vla_loop.i:38:[kernel] warning: Variable-sized local variable d
/* Generated by Frama-C */
 __attribute__((__FC_BUILTIN__)) void __fc_vla_free(void *);

void *__fc_vla_alloc(unsigned int);

void awhile(int x)
{
  int *p;
  while (1) {
    {
      unsigned int __lengthof_a1;
      /*@ assert alloca_bounds: 0 < sizeof(int) * x ≤ 4294967295; */ ;
      __lengthof_a1 = (unsigned int)x;
      int *a1 = __fc_vla_alloc(sizeof(int) * __lengthof_a1);
      p = (int *)(& a1);
      if (x) {
        __fc_vla_free((void *)a1);
        break;
      }
      else {
        __fc_vla_free((void *)a1);
        continue;
      }
    }
  }
  return;
}

int main(int argc, char **argv)
{
  int *p;
  switch (argc) {
    default:
    {
      unsigned int __lengthof_a;
      /*@ assert alloca_bounds: 0 < sizeof(int) * argc ≤ 4294967295; */ ;
      __lengthof_a = (unsigned int)argc;
      int *a = __fc_vla_alloc(sizeof(int) * __lengthof_a);
      while (1) {
        p = (int *)(& a);
        break;
      }
      ;
      __fc_vla_free((void *)a);
    }
  }
  {
    unsigned int __lengthof_b;
    /*@ assert alloca_bounds: 0 < sizeof(int) * argc ≤ 4294967295; */ ;
    __lengthof_b = (unsigned int)argc;
    int *b = __fc_vla_alloc(sizeof(int) * __lengthof_b);
    while (1) {
      p = (int *)(& b);
      break;
    }
    ;
    __fc_vla_free((void *)b);
  }
  {
    unsigned int __lengthof_c;
    /*@ assert alloca_bounds: 0 < sizeof(int) * argc ≤ 4294967295; */ ;
    __lengthof_c = (unsigned int)argc;
    int *c = __fc_vla_alloc(sizeof(int) * __lengthof_c);
    switch (argc) {
      case 1: p = (int *)(& c);
              break;
    }
    ;
    __fc_vla_free((void *)c);
  }
  {
    unsigned int __lengthof_d;
    /*@ assert alloca_bounds: 0 < sizeof(int) * argc ≤ 4294967295; */ ;
    __lengthof_d = (unsigned int)argc;
    int *d = __fc_vla_alloc(sizeof(int) * __lengthof_d);
    switch (argc) case 1: p = (int *)(& d);
    __fc_vla_free((void *)d);
  }
  return argc;
}


