[kernel] Parsing tests/syntax/loop-case-switch-for-unroll.c (with preprocessing)
[value] Analyzing a complete application starting at main
[value] Computing initial state
[value] Initial state computed
[value:initial-state] Values of globals at initialization
  vals[0] ∈ {1}
      [1] ∈ {42}
      [2] ∈ {5}
      [3] ∈ {1}
      [4] ∈ {43}
      [5] ∈ {11}
      [6] ∈ {0}
      [7] ∈ {1}
      [8] ∈ {0}
      [9] ∈ {44}
      [10] ∈ {12}
      [11..12] ∈ {0}
      [13..14] ∈ {1}
      [15] ∈ {45}
      [16] ∈ {11}
      [17..20] ∈ {0}
      [21] ∈ {46}
      [22] ∈ {13}
      [23..26] ∈ {0}
      [27] ∈ {47}
      [28] ∈ {12}
      [29..31] ∈ {0}
      [32] ∈ {48}
      [33] ∈ {15}
      [34..36] ∈ {0}
  i ∈ {-1}
tests/syntax/loop-case-switch-for-unroll.c:72:[kernel] warning: Non-natural loop detected.
tests/syntax/loop-case-switch-for-unroll.c:66:[kernel] warning: Non-natural loop detected.
tests/syntax/loop-case-switch-for-unroll.c:74:[kernel] warning: Non-natural loop detected.
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {1}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {42}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {5}
tests/syntax/loop-case-switch-for-unroll.c:78:[value] Frama_C_show_each_i_: {0}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {1}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {43}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {11}
tests/syntax/loop-case-switch-for-unroll.c:78:[value] Frama_C_show_each_i_: {10}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {0}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {1}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {0}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {44}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {12}
tests/syntax/loop-case-switch-for-unroll.c:78:[value] Frama_C_show_each_i_: {10}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {0}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {0}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {1}
tests/syntax/loop-case-switch-for-unroll.c:66:[value] Frama_C_show_each_n_: {3}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {1}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {45}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {11}
tests/syntax/loop-case-switch-for-unroll.c:78:[value] Frama_C_show_each_i_: {10}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {0}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {0}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {0}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {0}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {46}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {13}
tests/syntax/loop-case-switch-for-unroll.c:78:[value] Frama_C_show_each_i_: {10}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {0}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {0}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {0}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {0}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {47}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {12}
tests/syntax/loop-case-switch-for-unroll.c:78:[value] Frama_C_show_each_i_: {10}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {0}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {0}
tests/syntax/loop-case-switch-for-unroll.c:53:[value] Frama_C_show_each_nondet_: {0}
tests/syntax/loop-case-switch-for-unroll.c:84:[value] Frama_C_show_each_y_: {32}
tests/syntax/loop-case-switch-for-unroll.c:85:[value] Frama_C_show_each_x_: {32}
[value] done for function main
[value] ====== VALUES COMPUTED ======
[value:final-states] Values at end of function gen_nondet:
  i ∈ [0..31]
  __retres ∈ [0..47]
[value:final-states] Values at end of function main:
  y ∈ {32}
  x ∈ {32}
  n ∈ {0}
  i ∈ {31}
/* Generated by Frama-C */
int gen_nondet(int line);

static int vals[37] =
  {1,
   42,
   5,
   1,
   43,
   11,
   0,
   1,
   0,
   44,
   12,
   0,
   0,
   1,
   1,
   45,
   11,
   0,
   0,
   0,
   0,
   46,
   13,
   0,
   0,
   0,
   0,
   47,
   12,
   0,
   0,
   0,
   48,
   15,
   0,
   0,
   0};
static int i = -1;
/*@ assigns \result;
    assigns \result \from \nothing; */
extern int ( /* missing proto */ Frama_C_show_each_nondet_)();

int gen_nondet(int line)
{
  int __retres;
  i = (int)((unsigned int)(i + 1) % (sizeof(vals) / sizeof(int)));
  Frama_C_show_each_nondet_(vals[i]);
  __retres = vals[i];
  return __retres;
}

/*@ assigns \result;
    assigns \result \from \nothing; */
extern int ( /* missing proto */ Frama_C_show_each_n_)();

/*@ assigns \result;
    assigns \result \from \nothing; */
extern int ( /* missing proto */ Frama_C_show_each_i_)();

/*@ assigns \result;
    assigns \result \from \nothing; */
extern int ( /* missing proto */ Frama_C_show_each_y_)();

/*@ assigns \result;
    assigns \result \from \nothing; */
extern int ( /* missing proto */ Frama_C_show_each_x_)();

void main(void)
{
  int x;
  int y = 32;
  int n = 3;
  L0:
  switch (1) {
    int tmp;
    int tmp_0;
    L3: case 0: Frama_C_show_each_n_(n);
    tmp = gen_nondet(67);
    if (tmp) goto L;
    tmp_0 = gen_nondet(68);
    if (tmp_0) goto L1;
    while (1) {
      {
        int tmp_1;
        case 1: tmp_1 = gen_nondet(71);
        if (tmp_1) goto L1;
        L: x = y;
        case 2:
        {
          int j;
          int i_0 = 0;
          while (i_0 < 4) {
            {
              int tmp_2;
              int tmp_3;
              int tmp_4;
              int tmp_5;
              L1: j = gen_nondet(76);
              tmp_2 = gen_nondet(77);
              if (tmp_2 > 10) i_0 = 10; else i_0 = 0;
              Frama_C_show_each_i_(i_0);
              tmp_3 = gen_nondet(79);
              if (tmp_3) goto L;
              tmp_4 = gen_nondet(80);
              if (tmp_4) goto L0;
              tmp_5 = gen_nondet(81);
              if (tmp_5) goto L3;
            }
            i_0 ++;
          }
        }
      }
      n --;
      if (! (n > 0)) break;
    }
    Frama_C_show_each_y_(y);
    Frama_C_show_each_x_(x);
  }
  return;
}


