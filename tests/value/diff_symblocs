diff tests/value/oracle/alias.0.res.oracle tests/value/oracle_symblocs/alias.0.res.oracle
104,105c104,105
<   t ∈ {1; 2; 4}
<   u ∈ {2; 3; 4; 5}
---
>   t ∈ {4}
>   u ∈ {5}
111c111
<   t2 ∈ {0; 3; 6}
---
>   t2 ∈ {6}
diff tests/value/oracle/alias.4.res.oracle tests/value/oracle_symblocs/alias.4.res.oracle
79c79
<   y ∈ {0; 3; 77}
---
>   y ∈ {77}
diff tests/value/oracle/alias.5.res.oracle tests/value/oracle_symblocs/alias.5.res.oracle
166c166
<   y ∈ {0; 3; 77}
---
>   y ∈ {77}
diff tests/value/oracle/alias.6.res.oracle tests/value/oracle_symblocs/alias.6.res.oracle
86c86
<   x ∈ {0; 4; 33}
---
>   x ∈ {33}
diff tests/value/oracle/bitwise_pointer.res.oracle tests/value/oracle_symblocs/bitwise_pointer.res.oracle
54c54
<   x ∈ [0..9]
---
>   x ∈ {5}
67c67
<   x1 ∈ [0..9]
---
>   x1 ∈ {5}
diff tests/value/oracle/bitwise_reduction.res.oracle tests/value/oracle_symblocs/bitwise_reduction.res.oracle
15c15
<     {0; 1}, {0; 1; 0x3000; 0x3001; 0x3200; 0x3201; 0xF000; 0xFF00}
---
>     {0; 1}, {0x3000; 0x3001; 0x3200; 0x3201; 0xF000; 0xFF00}
17c17
<     {0; 1}, {0; 1; 0x3000; 0x3001; 0x3200; 0x3201; 0xF000; 0xFF00}
---
>     {0; 1}, {0x3000; 0x3001; 0x3200; 0x3201; 0xF000; 0xFF00}
21c21
<     {{ &t + {0; 4} }}, {0; 1; 0x3000; 0x3001; 0x3200; 0x3201; 0xF000; 0xFF00}
---
>     {{ &t + {0; 4} }}, {0x3000; 0x3001; 0x3200; 0x3201; 0xF000; 0xFF00}
23c23
<     {0; 1}, {0; 1; 0x3000; 0x3001; 0x3200; 0x3201; 0xF000; 0xFF00}
---
>     {0; 1}, {0x3000; 0x3001; 0x3200; 0x3201; 0xF000; 0xFF00}
diff tests/value/oracle/leaf.res.oracle tests/value/oracle_symblocs/leaf.res.oracle
41c41
< tests/value/leaf.i:53:[value] Frama_C_show_each_F: [-2147483648..2147483647]
---
> tests/value/leaf.i:53:[value] Frama_C_show_each_F: {5}
diff tests/value/oracle/library.res.oracle tests/value/oracle_symblocs/library.res.oracle
100d99
< tests/value/library.i:44:[value] warning: non-finite float value. assert \is_finite((float)(*pf + *pf));
diff tests/value/oracle/non_natural.res.oracle tests/value/oracle_symblocs/non_natural.res.oracle
53a54,55
> tests/value/non_natural.i:23:[kernel] more than 200(12501) elements to enumerate. Approximating.
> tests/value/non_natural.i:23:[kernel] more than 200(12500) elements to enumerate. Approximating.
54a57,58
> tests/value/non_natural.i:24:[kernel] more than 200(12501) elements to enumerate. Approximating.
> tests/value/non_natural.i:24:[kernel] more than 200(12500) elements to enumerate. Approximating.
57a62
> tests/value/non_natural.i:25:[kernel] more than 200(12500) elements to enumerate. Approximating.
60a66
> tests/value/non_natural.i:26:[kernel] more than 200(12500) elements to enumerate. Approximating.
63a70
> tests/value/non_natural.i:27:[kernel] more than 200(12500) elements to enumerate. Approximating.
66a74
> tests/value/non_natural.i:28:[kernel] more than 200(12500) elements to enumerate. Approximating.
69a78
> tests/value/non_natural.i:29:[kernel] more than 200(12500) elements to enumerate. Approximating.
72a82
> tests/value/non_natural.i:30:[kernel] more than 200(12500) elements to enumerate. Approximating.
96,105d105
< tests/value/non_natural.i:23:[kernel] more than 200(12501) elements to enumerate. Approximating.
< tests/value/non_natural.i:23:[kernel] more than 200(12500) elements to enumerate. Approximating.
< tests/value/non_natural.i:24:[kernel] more than 200(12501) elements to enumerate. Approximating.
< tests/value/non_natural.i:24:[kernel] more than 200(12500) elements to enumerate. Approximating.
< tests/value/non_natural.i:25:[kernel] more than 200(12500) elements to enumerate. Approximating.
< tests/value/non_natural.i:26:[kernel] more than 200(12500) elements to enumerate. Approximating.
< tests/value/non_natural.i:27:[kernel] more than 200(12500) elements to enumerate. Approximating.
< tests/value/non_natural.i:28:[kernel] more than 200(12500) elements to enumerate. Approximating.
< tests/value/non_natural.i:29:[kernel] more than 200(12500) elements to enumerate. Approximating.
< tests/value/non_natural.i:30:[kernel] more than 200(12500) elements to enumerate. Approximating.
140a141
> tests/value/non_natural.i:39:[kernel] more than 200(12500) elements to enumerate. Approximating.
diff tests/value/oracle/offsetmap.0.res.oracle tests/value/oracle_symblocs/offsetmap.0.res.oracle
36d35
< [value] Recording results for g
37a37
> [value] Recording results for g
diff tests/value/oracle/offsetmap.1.res.oracle tests/value/oracle_symblocs/offsetmap.1.res.oracle
36d35
< [value] Recording results for g
37a37
> [value] Recording results for g
diff tests/value/oracle/plevel.res.oracle tests/value/oracle_symblocs/plevel.res.oracle
11d10
< [value] Recording results for main
12a12
> [value] Recording results for main
diff tests/value/oracle/ptr_relation.0.res.oracle tests/value/oracle_symblocs/ptr_relation.0.res.oracle
23c23
<   i ∈ {0; 77; 333}
---
>   i ∈ {77}
diff tests/value/oracle/redundant_alarms.res.oracle tests/value/oracle_symblocs/redundant_alarms.res.oracle
10,11d9
< tests/value/redundant_alarms.c:11:[value] warning: accessing uninitialized left-value. assert \initialized(p);
< tests/value/redundant_alarms.c:12:[value] warning: accessing uninitialized left-value. assert \initialized(p);
19,20d16
< tests/value/redundant_alarms.c:21:[value] warning: accessing uninitialized left-value. assert \initialized(&t[i]);
< tests/value/redundant_alarms.c:22:[value] warning: accessing uninitialized left-value. assert \initialized(&t[i]);
28,29d23
< tests/value/redundant_alarms.c:32:[value] warning: accessing uninitialized left-value. assert \initialized(&t[j]);
< tests/value/redundant_alarms.c:33:[value] warning: accessing uninitialized left-value. assert \initialized(&t[i]);
48,51d41
< [scope:rm_asserts] removing 3 assertion(s)
< tests/value/redundant_alarms.c:12:[scope:rm_asserts] removing redundant assert Value: initialisation: \initialized(p);
< tests/value/redundant_alarms.c:32:[scope:rm_asserts] removing redundant assert Value: initialisation: \initialized(&t[j]);
< tests/value/redundant_alarms.c:33:[scope:rm_asserts] removing redundant assert Value: initialisation: \initialized(&t[i]);
90d79
<   /*@ assert Value: initialisation: \initialized(p); */
92d80
<   /*@ assert Value: initialisation: \initialized(p); */
109d96
<   /*@ assert Value: initialisation: \initialized(&t[i]); */
111d97
<   /*@ assert Value: initialisation: \initialized(&t[i]); */
124d109
<     /*@ assert Value: initialisation: \initialized(&t[j]); */
126d110
<     /*@ assert Value: initialisation: \initialized(&t[i]); */
178a163
>   int z;
181,183d165
<   *p = 1;
<   int z = *p + 1;
<   int w = *p + 2;
diff tests/value/oracle/relations2.res.oracle tests/value/oracle_symblocs/relations2.res.oracle
123d122
< tests/value/relations2.i:57:[value] Frama_C_show_each_NO2:
diff tests/value/oracle/struct2.res.oracle tests/value/oracle_symblocs/struct2.res.oracle
49a50
> tests/value/struct2.i:78:[kernel] warning: all target addresses were invalid. This path is assumed to be dead.
51d51
< tests/value/struct2.i:82:[value] warning: accessing out of bounds index. assert 0 ≤ (int)(tab2[i] + j);
75a76
> tests/value/struct2.i:185:[value] assertion 'Value,index_bound' got final status valid.
114,115c115
<   tab4[0] ∈ {0; 2}
<       [1] ∈ {0}
---
>   tab4[0..1] ∈ {0}
118c118,119
<   tab6[0..1] ∈ {0; 2}
---
>   tab6[0] ∈ {0}
>       [1] ∈ {2}
189c190
<              [9].a}; s1; s2; s5.e[0].b; s6.b; s8; tabl[0..1]; tab1[0..1];
---
>              [9].a}; s1; s2; s5.e[0].b; s6.b; s8; tabl[0..1]; tab1[0];
diff tests/value/oracle/symbolic_locs.res.oracle tests/value/oracle_symblocs/symbolic_locs.res.oracle
18a19,24
>     # Symbolic locations domain:
>     V: {[ t[i] -> {4} ]}
>     Z: {[ t[i] -> t[0..8]; i ]}
>     I: {[ t -> {t[i]}
>           i -> {t[i]} ]}
>     S: {[ i -> {t[i]} ]}
28a35,39
>     # Symbolic locations domain:
>     V: {[  ]}
>     Z: {[  ]}
>     I: {[  ]}
>     S: {[  ]}
43a55,60
>     # Symbolic locations domain:
>     V: {[ t[i] -> {4} ]}
>     Z: {[ t[i] -> t[0..8]; i ]}
>     I: {[ t -> {t[i]}
>           i -> {t[i]} ]}
>     S: {[ i -> {t[i]} ]}
53a71,75
>     # Symbolic locations domain:
>     V: {[  ]}
>     Z: {[  ]}
>     I: {[  ]}
>     S: {[  ]}
69a92,98
>     # Symbolic locations domain:
>     V: {[ t[i] -> {{ &x }} ]}
>     Z: {[ t[i] -> t[0..8]; i ]}
>     I: {[ t -> {t[i]}
>           i -> {t[i]} ]}
>     S: {[ i -> {t[i]}
>           x -> {t[i]} ]}
80a110,114
>     # Symbolic locations domain:
>     V: {[  ]}
>     Z: {[  ]}
>     I: {[  ]}
>     S: {[  ]}
94a129,134
>     # Symbolic locations domain:
>     V: {[ t[i] -> {1} ]}
>     Z: {[ t[i] -> t[0..8]; i ]}
>     I: {[ t -> {t[i]}
>           i -> {t[i]} ]}
>     S: {[ i -> {t[i]} ]}
102a143,147
>     # Symbolic locations domain:
>     V: {[  ]}
>     Z: {[  ]}
>     I: {[  ]}
>     S: {[  ]}
116a162,166
>     # Symbolic locations domain:
>     V: {[  ]}
>     Z: {[  ]}
>     I: {[  ]}
>     S: {[  ]}
124,125c174
< tests/value/symbolic_locs.i:111:[value] warning: signed overflow. assert *p + 1 ≤ 2147483647;
< tests/value/symbolic_locs.i:113:[value] Frama_C_show_each: [0..2147483647]
---
> tests/value/symbolic_locs.i:113:[value] Frama_C_show_each: [10001..2147483647]
133a183,187
>     # Symbolic locations domain:
>     V: {[  ]}
>     Z: {[  ]}
>     I: {[  ]}
>     S: {[  ]}
diff tests/value/oracle/test.0.res.oracle tests/value/oracle_symblocs/test.0.res.oracle
26c26
<   tmp ∈ [--..--] or UNINITIALIZED
---
>   tmp ∈ [-2147483647..2147483647] or UNINITIALIZED
